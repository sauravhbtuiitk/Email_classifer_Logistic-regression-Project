# -*- coding: utf-8 -*-
"""Email_classifer_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LtyOP7I0Uk5iIqiaeFKil6o9DXoIFw8Z
"""

!pip install scikit-learn

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""#Data collection And Preprocessing"""

#loading the data from csv file to a pandas datafram
raw_mail_data = pd.read_csv('/content/mail_data.csv')

print(raw_mail_data)

#Replace the null values with a null string
mail_data = raw_mail_data.where((pd.notnull(raw_mail_data)),'')

#printing the first 5 rows of the dataframe
mail_data.head()

#checking the number of rows and colume in dataframe
mail_data.shape

"""#label  Encoding"""

#label spam mail as 0; ham mail as 1;

mail_data.loc[mail_data['Category'] == 'spam','Category',] = 0
mail_data.loc[mail_data['Category'] == 'ham','Category',] = 1

"""spam- 0
ham -1
"""

# separating the data as texts and label
X = mail_data['Message']

Y = mail_data['Category']

print(X)

print(Y)

"""#Splitting the data  into training data and test data"""

X_train,X_test,Y_train,Y_test  =train_test_split(X,Y,test_size=0.2,random_state=3)

print(X.shape)
print(X_train.shape)
print(X_test.shape)

"""#feature extraction"""

#transform the text data to feature vectors that can be  used as input to the logistic regression
feature_extraction = TfidfVectorizer(min_df = 1, stop_words ='english')


X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

#covert Y_train and Y_test value as integer
Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

print(X_train_features)

"""# Training the model
Logistic Regression
"""

model = LogisticRegression()

# Training the logistic Regression model with the training data
model.fit(X_train_features,Y_train)

print(Y_train)

print(X_train_features.shape)

"""#Evaluating the trained model"""

# Pridiction on training data

prediction_on_training_data = model.predict(X_train_features)
accuracy_on_training_data = accuracy_score(Y_train,prediction_on_training_data)

print('Accuracy_on_training_data :',accuracy_on_training_data*100,'%')

prediction_on_test_training_data = model.predict(X_test_features)
accuracy_on_test_training_data = accuracy_score(Y_test,prediction_on_test_training_data)

print('Accuracy_on_test_training_data :',accuracy_on_test_training_data*100,'%')

"""# Building a predictive system"""

input_mail =["Free free Msg Hey there darling it's been 3 week's now and no word back! I'd like some fun you up for it still? Tb ok! XxX std chgs to send, free Â£1.50 to rcv"]
#convert text to feature vectors
input_data_features = feature_extraction.transform(input_mail)

#making prediction

prediction =model.predict(input_data_features)
#print(prediction)

if prediction[0]==1:
 print('it is a personel mail')
else:
  print('it is a spem mail')

